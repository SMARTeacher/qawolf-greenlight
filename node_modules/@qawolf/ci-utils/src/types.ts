import zod from "zod";

const environmentVariablesSchema = zod.record(zod.string(), zod.string());

export const jsonEnvironmentVariablesSchema = zod
  .string()
  .transform((str, ctx): unknown => {
    try {
      return JSON.parse(str);
    } catch (error) {
      ctx.addIssue({
        code: "custom",
        message: "input is not a valid JSON-formatted string",
      });
      return;
    }
  })
  .pipe(environmentVariablesSchema);

export type EnvironmentVariables = zod.infer<typeof environmentVariablesSchema>;

const environmentsMappingSchema = zod.array(
  zod.object({
    environmentAlias: zod.string(),
    vcsBranch: zod.string(),
  }),
);
export const jsonEnvironmentsMappingSchema = zod
  .string()
  .transform((str, ctx): unknown => {
    try {
      return JSON.parse(str);
    } catch (error) {
      ctx.addIssue({
        code: "custom",
        message: "input is not a valid JSON-formatted string",
      });
      return;
    }
  })
  .pipe(environmentsMappingSchema);
