import {
  jsonEnvironmentsMappingSchema,
  jsonEnvironmentVariablesSchema,
} from "./types";

describe("types", () => {
  describe("jsonEnvironmentVariablesSchema", () => {
    it("should fail to parse malformed JSON", () => {
      const result = jsonEnvironmentVariablesSchema.safeParse("{");
      expect(result.success).toBe(false);
    });
    it("should succeed to parse well formatted JSON object string-string dictionary", () => {
      const result = jsonEnvironmentVariablesSchema.safeParse(
        JSON.stringify({
          foo: "bar",
        }),
      );
      expect(result.success).toBe(true);
    });
    it("should fail to parse well formatted JSON which is not an object", () => {
      const result = jsonEnvironmentVariablesSchema.safeParse(
        JSON.stringify("Hello world"),
      );
      expect(result.success).toBe(false);
    });

    it("should fail to parse well formatted JSON which is not a dictionary of string-string", () => {
      const result = jsonEnvironmentVariablesSchema.safeParse(
        JSON.stringify({ foo: 1 }),
      );
      expect(result.success).toBe(false);
    });
  });

  describe("jsonEnvironmentsMappingSchema", () => {
    it("fails with invalid JSON", () => {
      const result = jsonEnvironmentsMappingSchema.safeParse("{");
      expect(result.success).toBe(false);
    });
    it("succeeds with valid JSON w/ correct schema", () => {
      const result = jsonEnvironmentsMappingSchema.safeParse(
        JSON.stringify([
          {
            environmentAlias: "foo",
            vcsBranch: "bar",
          },
        ]),
      );
      expect(result.success).toBe(true);
    });
    it("fails with valid JSON w/ incorrect schema", () => {
      const result = jsonEnvironmentsMappingSchema.safeParse(
        JSON.stringify([{ invalid: "schema" }]),
      );
      expect(result.success).toBe(false);
    });
  });
});
