"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.qawolfGraphql = qawolfGraphql;
class GraphQLBadResponseError extends Error {
    constructor(message) {
        super(message);
        this.name = "GraphQLBadResponseError";
    }
}
async function qawolfGraphql({ deps: { fetch: localFetch, log }, apiConfig: { apiKey, serviceBase }, name, query: queryGql, variables, }) {
    try {
        const response = await localFetch(new URL(`/api/graphql`, serviceBase), {
            body: JSON.stringify({
                query: queryGql,
                variables,
            }),
            headers: {
                Authorization: `Bearer ${apiKey}`,
                "Content-Type": "application/json",
            },
            method: "post",
        });
        let rawBody;
        try {
            rawBody = (await response.json());
        }
        catch (e) {
            throw new GraphQLBadResponseError(`[GraphQL] Unexpected response schema. Not valid JSON body.`);
        }
        if ("errors" in rawBody) {
            const extensionsCodes = rawBody.errors.flatMap((error) => error.extensions?.map?.((ext) => ext.code) ?? []);
            for (const error of rawBody.errors) {
                log.warn(`❌ [GraphQL] error: ${error.message}`);
            }
            const isUnauthenticated = extensionsCodes.includes("UNAUTHENTICATED");
            const isForbidden = extensionsCodes.includes("FORBIDDEN");
            const isInternal = extensionsCodes.includes("INTERNAL");
            const isBadUserInput = extensionsCodes.includes("BAD_USER_INPUT");
            return {
                errorCode: isUnauthenticated
                    ? "unauthenticated"
                    : isForbidden
                        ? "forbidden"
                        : isInternal
                            ? "internal"
                            : isBadUserInput
                                ? "bad-input"
                                : "unknown",
                isGqlError: true,
            };
        }
        if (!("data" in rawBody)) {
            throw new GraphQLBadResponseError(`[GraphQL] Unexpected response schema. Missing 'data' in response body. This is a bug.`);
        }
        if (!(name in rawBody.data)) {
            throw new GraphQLBadResponseError(`[GraphQL] Unexpected response schema. Missing 'data.${name}' in response body. This is a bug.`);
        }
        return {
            isGqlError: false,
            responseBody: rawBody.data[name],
        };
    }
    catch (e) {
        if (e instanceof GraphQLBadResponseError)
            throw e;
        log.error(`❌ [GraphQL] network error: ${e instanceof Error ? e.message : e}`);
        return { errorCode: "network-error", isGqlError: true };
    }
}
//# sourceMappingURL=graphql.js.map