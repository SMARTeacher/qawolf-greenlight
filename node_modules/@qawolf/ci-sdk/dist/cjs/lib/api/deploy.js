"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postDeploySuccess = postDeploySuccess;
async function postDeploySuccess({ apiKey, serviceBase }, { branch, commitUrl, deduplicationKey, deploymentType, deploymentUrl, hostingService, sha, variables, }, { fetch: localFetch }) {
    try {
        const response = await localFetch(new URL("/api/webhooks/deploy_success", serviceBase), {
            body: JSON.stringify({
                branch,
                commit_url: commitUrl,
                deduplication_key: deduplicationKey,
                deployment_type: deploymentType,
                deployment_url: deploymentUrl,
                hosting_service: hostingService,
                sha,
                variables,
            }),
            headers: {
                Authorization: `Bearer ${apiKey}`,
                "Content-Type": "application/json",
            },
            method: "POST",
        });
        if (response.ok) {
            const { results } = (await response.json());
            const failedTrigger = results.find((t) => !!t.failure_reason);
            const successfulTrigger = results.find((t) => !!t.created_suite_id);
            if (successfulTrigger == null && failedTrigger == null) {
                return {
                    failureReason: "no-matched-trigger",
                    success: false,
                };
            }
            if (failedTrigger) {
                return {
                    details: failedTrigger.failure_reason,
                    failureReason: "run-could-not-be-created",
                    success: false,
                };
            }
            if (!successfulTrigger) {
                return {
                    failureReason: "no-matched-trigger",
                    success: false,
                };
            }
            const runId = successfulTrigger.created_suite_id;
            return { runId, success: true };
        }
        else {
            if (response.status >= 500) {
                return {
                    failureReason: "5XX-server-error",
                    httpStatus: response.status,
                    success: false,
                };
            }
            if (response.status === 401) {
                return {
                    failureReason: "401-unauthorized",
                    httpStatus: response.status,
                    success: false,
                };
            }
            if (response.status === 403) {
                return {
                    failureReason: "403-forbidden",
                    httpStatus: response.status,
                    success: false,
                };
            }
            return {
                failureReason: "4XX-client-error",
                httpStatus: response.status,
                success: false,
            };
        }
    }
    catch (e) {
        return {
            failureReason: "network-error",
            success: false,
        };
    }
}
//# sourceMappingURL=deploy.js.map