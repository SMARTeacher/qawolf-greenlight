"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchCiGreenlightStatus = fetchCiGreenlightStatus;
async function fetchCiGreenlightStatus({ serviceBase, apiKey }, { runId, }, { fetch: localFetch }) {
    try {
        const resp = await localFetch(new URL(`/api/v0/ci-greenlight/${encodeURIComponent(runId)}`, serviceBase), {
            headers: {
                Authorization: `Bearer ${apiKey}`,
            },
        });
        if (resp.ok) {
            const greenlightStatus = (await resp.json());
            return {
                greenlightStatus,
                httpStatus: resp.status,
                ok: true,
            };
        }
        if (resp.status === 404) {
            return {
                canRetry: true,
                errorType: "not-found",
                httpStatus: resp.status,
                ok: false,
            };
        }
        if (resp.status >= 500) {
            return {
                canRetry: true,
                errorType: "server",
                httpStatus: resp.status,
                ok: false,
            };
        }
        return {
            canRetry: false,
            errorType: "client",
            httpStatus: resp.status,
            ok: false,
        };
    }
    catch (e) {
        return {
            canRetry: true,
            errorType: "network",
            httpStatus: 0,
            ok: false,
        };
    }
}
//# sourceMappingURL=ci-greenlight.js.map