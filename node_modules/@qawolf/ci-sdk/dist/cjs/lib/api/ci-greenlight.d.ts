import { type ApiConfig } from "../api-types";
import { type SdkDependencies } from "../sdk/dependencies";
export type CiGreenlightBugDetails = {
    /**
     * The URL of this BR in the QAWolf application.
     */
    applicationUrl: string;
    /**
     * If this bug report is linked to an external issue, it will
     * show up here.
     */
    externalIssue: {
        /**
         * The URL of the external issue in the external platform
         * application.
         */
        applicationUrl: string;
        /**
         * The ID of this issue in the external platform.
         */
        externalIssueId: string;
        /**
         * Lowercase platform name (e.g. "jira").
         */
        platform: string;
    } | undefined;
    /**
     * True if the bug is blocking.
     */
    isBlocking: boolean;
    /**
     * True if the bug has been found in this run.
     */
    isNew: boolean;
    /**
     * The name of this bug.
     */
    name: string;
    /**
     * The bug number.
     */
    number: number;
    /**
     * The priority of this bug.
     */
    priority: "medium" | "unprioritized" | "low" | "high" | "urgent";
};
export type CiGreenlightCompletedSuiteDetails = {
    blockingBugsCount: number;
    blockingBugUrls: string[];
    nonBlockingBugsCount: number;
    nonBlockingBugUrls: string[];
    reproducedBugs: CiGreenlightBugDetails[];
};
export type CiGreenlightStatusBase = {
    relevantRunId: string;
    relevantRunUrl: string;
    relevantRunWithBugsUrl: string;
    rootRunId: string;
    rootRunUrl: string;
    workflowsDisabledAfterRunCount: number;
    workflowsInRunCount: number;
    workflowsUnderInvestigationCount: number;
};
/**
 * The status of a CI greenlight run. See the API documentation here for
 * more details: https://qawolf.notion.site/1b170576efea411fa785842a71e7c99e
 */
export type CiGreenlightStatus = CiGreenlightStatusBase & ({
    blockingBugsCount: number;
    blockingBugUrls: string[];
    greenlight: boolean;
    nonBlockingBugsCount: number;
    nonBlockingBugUrls: string[];
    reproducedBugs: CiGreenlightBugDetails[];
    runStage: "completed";
} | {
    greenlight: false;
    runStage: "initializing" | "underReview" | "canceled";
});
export declare function fetchCiGreenlightStatus({ serviceBase, apiKey }: ApiConfig, { runId, }: {
    runId: string;
}, { fetch: localFetch }: SdkDependencies): Promise<{
    readonly greenlightStatus: CiGreenlightStatus;
    readonly httpStatus: number;
    readonly ok: true;
    readonly canRetry?: undefined;
    readonly errorType?: undefined;
} | {
    readonly canRetry: true;
    readonly errorType: "not-found";
    readonly httpStatus: 404;
    readonly ok: false;
    readonly greenlightStatus?: undefined;
} | {
    readonly canRetry: true;
    readonly errorType: "server";
    readonly httpStatus: number;
    readonly ok: false;
    readonly greenlightStatus?: undefined;
} | {
    readonly canRetry: false;
    readonly errorType: "client";
    readonly httpStatus: number;
    readonly ok: false;
    readonly greenlightStatus?: undefined;
} | {
    readonly canRetry: true;
    readonly errorType: "network";
    readonly httpStatus: 0;
    readonly ok: false;
    readonly greenlightStatus?: undefined;
}>;
//# sourceMappingURL=ci-greenlight.d.ts.map