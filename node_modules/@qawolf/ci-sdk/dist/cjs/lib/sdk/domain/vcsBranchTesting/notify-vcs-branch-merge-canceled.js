"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.notifyVCSBranchMergeCanceled = notifyVCSBranchMergeCanceled;
const notify_vcs_branch_merge_canceled_mutation_1 = require("../../../api/notify-vcs-branch-merge-canceled-mutation");
const utils_1 = require("../../../utils");
const domain_failure_1 = require("./lib/domain-failure");
const graphql_error_1 = require("./lib/graphql-error");
const retry_1 = require("./lib/retry");
async function runNotifyVCSMergeCanceledOnce(deps, apiConfig, input) {
    const log = deps.log;
    const { headEnvironmentAlias } = input;
    const resp = await (0, notify_vcs_branch_merge_canceled_mutation_1.callNotifyVCSBranchMergeCanceledMutation)(deps, apiConfig, {
        headEnvironmentAlias,
    });
    if (resp.isGqlError) {
        return (0, graphql_error_1.graphQLErrorToAbortResult)({
            graphQLPayload: resp,
            log,
            methodName: "notifyVCSBranchMergeCanceled",
        });
    }
    const result = resp.responseBody;
    if (result.outcome === "success") {
        log.info(`âœ… [notifyVCSBranchMergeCanceled] Successfully notified the CI system that the merge was canceled.`);
        return {
            outcome: "success",
        };
    }
    (0, utils_1.assertType)(result.outcome);
    return (0, domain_failure_1.domainFailureToAbortResult)({
        log,
        methodName: "notifyVCSBranchMergeCanceled",
        result,
    });
}
async function notifyVCSBranchMergeCanceled(deps, apiConfig, input) {
    const { maxRetries = 10 } = input;
    return (0, retry_1.retryWithExponentialBackoff)({
        log: deps.log,
        maxRetries,
        methodName: "notifyVCSBranchMergeCanceled",
        retriableAbortReasons: [
            "network-error",
            "server-error",
        ],
        runOnce: () => runNotifyVCSMergeCanceledOnce(deps, apiConfig, input),
    });
}
//# sourceMappingURL=notify-vcs-branch-merge-canceled.js.map