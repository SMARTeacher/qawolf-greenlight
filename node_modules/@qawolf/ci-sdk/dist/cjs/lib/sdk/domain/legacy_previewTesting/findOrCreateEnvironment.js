"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findOrCreateEnvironment = findOrCreateEnvironment;
const constants_1 = require("./constants");
async function findOrCreateEnvironment(deps, apiConfig, { branch, pr, qaWolfTeamId, baseEnvironmentId, }) {
    const retrievalResponse = await deps.fetch(constants_1.qawolfGraphQLEndpoint, {
        body: JSON.stringify({
            query: `
      query Environments($where: EnvironmentWhereInput) {
        environments(where: $where) {
          id
        }
      }
      `,
            variables: {
                where: {
                    deletedAt: {
                        equals: null,
                    },
                    name: {
                        equals: pr
                            ? `[PR] #${pr.number} - ${pr.title}`
                            : `[Preview] ${branch}`,
                    },
                },
            },
        }),
        headers: {
            Authorization: `Bearer ${apiConfig.apiKey}`,
            "Content-Type": "application/json",
        },
        method: "post",
    });
    const jsonResponse = (await retrievalResponse.json());
    if (jsonResponse.data.environments[0]) {
        const environmentId = jsonResponse.data.environments[0].id;
        deps.log.info(`Environment already exists with ID: ${environmentId}`);
        return environmentId;
    }
    const creationResponse = await deps.fetch(constants_1.qawolfGraphQLEndpoint, {
        body: JSON.stringify({
            operationName: "createEnvironment",
            query: `
        mutation createEnvironment($name: String!, $teamId: String!) {
          createEnvironment(name: $name, teamId: $teamId) {
            id
            branchId
          }
        }
      `,
            variables: {
                name: pr ? `[PR] #${pr.number} - ${pr.title}` : `[Preview] ${branch}`,
                teamId: qaWolfTeamId,
            },
        }),
        headers: {
            Authorization: `Bearer ${apiConfig.apiKey}`,
            "Content-Type": "application/json",
        },
        method: "post",
    });
    const createionResponseJson = (await creationResponse.json());
    deps.log.info(`Environment response: ${JSON.stringify(createionResponseJson)}`);
    if (!createionResponseJson.data.createEnvironment.id) {
        throw Error("Environment ID not found in response");
    }
    const multiBranchResponse = await deps.fetch(constants_1.qawolfGraphQLEndpoint, {
        body: JSON.stringify({
            query: `
        query teamBranches($teamId: String!) {
          teamBranches: activeTeamBranches(teamId: $teamId) {
            id
            environments{
              id
            }
          }
        }
      `,
            variables: {
                teamId: qaWolfTeamId,
            },
        }),
        headers: {
            Authorization: `Bearer ${apiConfig.apiKey}`,
            "Content-Type": "application/json",
        },
        method: "post",
    });
    const multiBranchResponseJson = (await multiBranchResponse.json());
    const hasMultipleBranches = multiBranchResponseJson.data.teamBranches.length > 1;
    if (!hasMultipleBranches) {
        return createionResponseJson.data.createEnvironment.id;
    }
    const sourceEnvironmentResponse = await deps.fetch(constants_1.qawolfGraphQLEndpoint, {
        body: JSON.stringify({
            query: `
        query EnvironmentWithBranch($where: EnvironmentWhereUniqueInput!) {
          environment(where: $where) {
            id
            branchId
          }
        }
      `,
            variables: {
                where: {
                    id: baseEnvironmentId,
                },
            },
        }),
        headers: {
            Authorization: `Bearer ${apiConfig.apiKey}`,
            "Content-Type": "application/json",
        },
        method: "post",
    });
    const sourceEnvironmentJson = (await sourceEnvironmentResponse.json());
    const baseBranchId = sourceEnvironmentJson.data.environment.branchId;
    const targetBranchId = createionResponseJson.data.createEnvironment.branchId;
    if (!baseBranchId) {
        throw Error("Base branch ID not found in response");
    }
    deps.log.info(`Promoting workflows from branch ${baseBranchId} to ${targetBranchId}`);
    const promotionResponse = await deps.fetch(constants_1.qawolfGraphQLEndpoint, {
        body: JSON.stringify({
            query: `
        mutation PromoteWorkflowsToBranch(
          $sourceTeamBranchId: String!
          $targetTeamBranchId: String!
        ) {
          promoteWorkflowsToBranch(
            mergeStrategy: overwrite
            sourceTeamBranchId: $sourceTeamBranchId
            targetTeamBranchId: $targetTeamBranchId
          )
        }
      `,
            variables: {
                sourceTeamBranchId: baseBranchId,
                targetTeamBranchId: targetBranchId,
            },
        }),
        headers: {
            Authorization: `Bearer ${apiConfig.apiKey}`,
            "Content-Type": "application/json",
        },
        method: "post",
    });
    const promotionResponseJson = await promotionResponse.json();
    if (!promotionResponseJson) {
        throw new Error("Promotion failed");
    }
    return createionResponseJson.data.createEnvironment.id;
}
//# sourceMappingURL=findOrCreateEnvironment.js.map