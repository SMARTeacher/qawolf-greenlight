import { type CiGreenlightStatus } from "../../api/ci-greenlight";
import { type ApiConfig } from "../../api-types";
import { type SdkDependencies } from "../dependencies";
export type PollCiGreenlightPollConfig = {
    /**
     * Maximum number of network operations retries before aborting the job.
     *
     * @default 10
     */
    maxRetries: number;
    /**
     * Timeout in milliseconds before aborting this polling operation.
     *
     * @default 120 minutes
     */
    pollTimeout: number;
    /**
     * Interval in milliseconds between network operations retries.
     *
     * @default 10 seconds
     */
    retryInterval: number;
    /**
     * Interval in milliseconds between polling for a run in progress.
     *
     * @default 30 seconds
     */
    runInProgressInterval: number;
    /**
     * Interval in milliseconds between polling for a run under review.
     *
     * @default 60 minutes
     */
    runUnderReviewInterval: number;
};
export type PollCiGreenlightHttpAbortReason = "4XX-client-error" | "404-run-not-found" | "5XX-server-error" | "XXX-other-http-code";
export type PollCiGreenlightNonHttpAbortReason = "poll-timed-out" | "run-canceled" | "network-error";
export type PollCiGreenlightAbortReason = PollCiGreenlightNonHttpAbortReason | PollCiGreenlightHttpAbortReason;
export type PollCiGreenlightStatus = {
    greenlightStatus: Extract<CiGreenlightStatus, {
        runStage: "completed";
    }>;
    /**
     * No blocking bugs were found in the run.
     */
    outcome: "success";
} | {
    greenlightStatus: Extract<CiGreenlightStatus, {
        runStage: "completed";
    }>;
    /**
     * Blocking bugs were found in the run.
     */
    outcome: "failed";
} | {
    abortReason: PollCiGreenlightHttpAbortReason;
    httpStatus: number;
    /**
     * The run was aborted due to an unrecoverable error.
     */
    outcome: "aborted";
} | {
    abortReason: PollCiGreenlightNonHttpAbortReason;
    httpStatus: undefined;
    /**
     * The run was aborted due to an unrecoverable error.
     */
    outcome: "aborted";
};
export type PollCiGreenlightParams = {
    /**
     * Callback to be called when the lifecycle stage of the run changes.
     */
    onRunStageChanged?: (current: CiGreenlightStatus, previous: CiGreenlightStatus | undefined) => unknown | Promise<unknown>;
    runId: string;
} & Partial<PollCiGreenlightPollConfig>;
export declare function pollCiGreenlightStatus(deps: SdkDependencies, apiConfig: ApiConfig, { runId, onRunStageChanged: onRunStageChanged, ...pollConfig }: PollCiGreenlightParams): Promise<PollCiGreenlightStatus>;
//# sourceMappingURL=poll-ci-greenlight.d.ts.map