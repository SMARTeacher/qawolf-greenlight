import { type SdkDependencies } from "../../dependencies";
import { type NotifyBuildDeployedInput, type NotifyBuildDeployedResult } from "./notify-vcs-branch-build-deployed";
import { type NotifyMergeCanceledResult, type NotifyVCSBranchMergeCanceledInput } from "./notify-vcs-branch-merge-canceled";
import { type NotifyMergeCompletedResult, type NotifyVCSBranchMergeCompletedInput } from "./notify-vcs-branch-merge-completed";
export * from "./types";
export * from "./lib/aliases";
export type { NotifyBuildDeployedInput, NotifyBuildDeployedResult, } from "./notify-vcs-branch-build-deployed";
export type { NotifyVCSBranchMergeCanceledInput, NotifyMergeCanceledResult, } from "./notify-vcs-branch-merge-canceled";
export type { NotifyVCSBranchMergeCompletedInput, NotifyMergeCompletedResult, } from "./notify-vcs-branch-merge-completed";
export declare function makeVCSBranchTestingSDK({ apiKey, serviceBase, }: {
    apiKey: string;
    serviceBase?: string;
}, { log, fetch, }?: Partial<SdkDependencies>): VCSBranchTestingSDK;
export type VCSBranchTestingSDK = {
    /**
     * Notify QA Wolf that the build has been deployed and is ready to be tested.
     * Any ongoing run will be aborted and a new one will be started.
     *
     * @remarks This method will create a new Environment if none exists matching
     * the provided environment alias.
     */
    notifyVCSBranchBuildDeployed(input: NotifyBuildDeployedInput): Promise<NotifyBuildDeployedResult>;
    /**
     * Notify QA Wolf that the VCS branch merge has been canceled, e.g. the PR/MR
     * has been closed without merging. This will abort any ongoing run, and
     * discard any investigation work by QA Wolf.
     */
    notifyVCSBranchMergeCanceled(input: NotifyVCSBranchMergeCanceledInput): Promise<NotifyMergeCanceledResult>;
    /**
     * Notify QA Wolf that the VCS branch merge has been completed. This will
     * inform QA Wolf that any Workflow code change should be promoted to the
     * base environment, as defined in the baseEnvironmentsMapping.
     */
    notifyVCSBranchMergeCompleted(input: NotifyVCSBranchMergeCompletedInput): Promise<NotifyMergeCompletedResult>;
};
//# sourceMappingURL=index.d.ts.map