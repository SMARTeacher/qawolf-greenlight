"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryWithExponentialBackoff = retryWithExponentialBackoff;
const utils_1 = require("../../../../utils");
async function retryWithExponentialBackoff({ maxRetries, runOnce, log, methodName, retriableAbortReasons, }) {
    let attemptNumber = 0;
    let result;
    do {
        attemptNumber++;
        log.info(`üîÅ [${methodName}] Attempt ${attemptNumber}/${maxRetries + 1}.`);
        result = await runOnce();
        // If success or non-recoverable error, return immediately
        if (result.outcome === "success" ||
            !retriableAbortReasons.includes(result.abortReason)) {
            return result;
        }
        // Exit if max retries reached
        if (attemptNumber >= maxRetries + 1)
            return result;
        // Else, backoff and retry
        const backoffMs = (0, utils_1.getBackoffMs)(attemptNumber);
        const secondsApproximation = (backoffMs / 1000).toFixed(1);
        log.warn(`‚è≥ [${methodName}] Retrying in ${secondsApproximation} seconds.`);
        await (0, utils_1.sleep)(backoffMs);
    } while (true);
}
//# sourceMappingURL=retry.js.map