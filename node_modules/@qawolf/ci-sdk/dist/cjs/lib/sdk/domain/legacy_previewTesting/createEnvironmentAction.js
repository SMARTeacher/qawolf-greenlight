"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEnvironmentAction = void 0;
const createEnvironmentVariables_1 = require("./createEnvironmentVariables");
const findOrCreateEnvironment_1 = require("./findOrCreateEnvironment");
const findOrCreateTrigger_1 = require("./findOrCreateTrigger");
const findRepositoryIdByName_1 = require("./findRepositoryIdByName");
const getEnvironmentVariablesFromEnvironment_1 = require("./getEnvironmentVariablesFromEnvironment");
const getTagsFromEnvironment_1 = require("./getTagsFromEnvironment");
const createEnvironmentAction = async (deps, apiConfig, { branch, headRepoFullName, deploymentUrl, qaWolfTeamId, pr, variables, baseEnvironmentId, }) => {
    deps.log.info("Creating environment for pull request...");
    const environmentId = await (0, findOrCreateEnvironment_1.findOrCreateEnvironment)(deps, apiConfig, {
        baseEnvironmentId,
        branch,
        pr,
        qaWolfTeamId,
    });
    deps.log.info(`Environment created with ID: ${environmentId}`);
    const baseEnvironmentVariablesJSON = baseEnvironmentId
        ? await (0, getEnvironmentVariablesFromEnvironment_1.getEnvironmentVariablesFromEnvironment)(deps, apiConfig, {
            environmentId: baseEnvironmentId,
        })
        : {};
    if (typeof baseEnvironmentVariablesJSON !== "object") {
        deps.log.error("baseEnvironmentVariablesJSON is not an object");
        throw new Error("baseEnvironmentVariablesJSON is not an object");
    }
    const combinedEnvironmentVariables = {
        ...baseEnvironmentVariablesJSON,
        ...variables,
        ...(deploymentUrl ? { URL: deploymentUrl } : {}),
    };
    deps.log.info("Creating environment variables...");
    await (0, createEnvironmentVariables_1.createEnvironmentVariables)(deps, apiConfig, {
        environmentId,
        variables: combinedEnvironmentVariables,
    });
    deps.log.info(`Environment variables created for environment ID: ${environmentId}`);
    deps.log.info("Retrieving repository ID...");
    const repositoryId = await (0, findRepositoryIdByName_1.findRepositoryIdByName)(deps, apiConfig, {
        headRepoFullName,
    });
    deps.log.info(repositoryId
        ? `Repository ID retrieved: ${repositoryId}`
        : "Repository not integrated with QA Wolf, enable it in the settings page to get PR comments and checks.");
    const tags = baseEnvironmentId
        ? await (0, getTagsFromEnvironment_1.getTagsFromGenericTriggerInEnvironment)(deps, apiConfig, {
            environmentId: baseEnvironmentId,
        })
        : undefined;
    deps.log.info(`Tags retrieved: ${tags?.map((tag) => tag.name).join(", ")}`);
    deps.log.info("Creating trigger for deployment...");
    await (0, findOrCreateTrigger_1.findOrCreateTrigger)(deps, apiConfig, {
        branch,
        environmentId,
        pr,
        qaWolfTeamId,
        repositoryId,
        tags,
    });
};
exports.createEnvironmentAction = createEnvironmentAction;
//# sourceMappingURL=createEnvironmentAction.js.map