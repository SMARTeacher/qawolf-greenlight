import { type DeployConfig } from "../../api/deploy";
import { type ApiConfig } from "../../api-types";
import { type SdkDependencies } from "../dependencies";
export type AttemptDeployFailedReason = "no-matched-trigger" | "run-could-not-be-created";
export type AttemptDeployHttpAbortReason = "4XX-client-error" | "401-unauthorized" | "403-forbidden" | "5XX-server-error";
export type AttemptDeployNonHttpAbortReason = "network-error";
export type AttemptDeployAbortReason = AttemptDeployHttpAbortReason | AttemptDeployNonHttpAbortReason;
export type NotifyDeployStatus = {
    /**
     * A run was successfully created.
     */
    outcome: "success";
    runId: string;
} | {
    failReason: AttemptDeployFailedReason;
    /**
     * A run could not be created.
     */
    outcome: "failed";
} | {
    abortReason: AttemptDeployNonHttpAbortReason;
    httpStatus: undefined;
    /**
     * An unrecoverable error occurred.
     */
    outcome: "aborted";
} | {
    abortReason: AttemptDeployHttpAbortReason;
    httpStatus: number;
    /**
     * An unrecoverable HTTP error occurred.
     */
    outcome: "aborted";
};
export declare function attemptNotifyDeploy(deps: SdkDependencies, apiConfig: ApiConfig, config: Partial<DeployConfig>): Promise<NotifyDeployStatus>;
//# sourceMappingURL=attempt-deploy.d.ts.map