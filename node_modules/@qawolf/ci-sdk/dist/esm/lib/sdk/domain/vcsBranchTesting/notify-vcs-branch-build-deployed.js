import { callNotifyVCSBranchBuildDeployedMutation } from "../../../api/notify-vcs-branch-build-deployed-mutation";
import { assertType } from "../../../utils";
import { domainFailureToAbortResult } from "./lib/domain-failure";
import { graphQLErrorToAbortResult } from "./lib/graphql-error";
import { retryWithExponentialBackoff } from "./lib/retry";
async function runNotifyVCSBranchBuildDeployedOnce(deps, apiConfig, input) {
    const { baseEnvironmentsMapping, baseVcsBranch, headEnvironmentAlias, headEnvironmentName, headEnvironmentVariables, headVcsCommitId, concurrencyLimit, headVcsCommitUrl, headVcsBranch, pullOrMergeRequestNumber, } = input;
    const log = deps.log;
    const baseEnvironmentAlias = baseEnvironmentsMapping.find((mapping) => mapping.vcsBranch === baseVcsBranch)?.environmentAlias;
    if (baseEnvironmentAlias === undefined) {
        log.error(`❌ [notifyVCSBranchBuildDeployed] Could not find a base environment for VCS branch '${baseVcsBranch}'. Make sure you provide ` +
            "a mapping for this base branch in the 'baseEnvironmentsMapping' field.");
        return {
            abortReason: "missing-vcs-branch-to-environment-alias-mapping",
            outcome: "aborted",
        };
    }
    let finalConcurrencyLimit = concurrencyLimit;
    if (typeof concurrencyLimit === "number") {
        if (concurrencyLimit === Infinity) {
            finalConcurrencyLimit = 0;
        }
        else if (isNaN(concurrencyLimit) || !Number.isInteger(concurrencyLimit)) {
            log.error(`❌ [notifyVCSBranchBuildDeployed] Invalid concurrency limit '${concurrencyLimit}'. Must be a positive integer.`);
            return {
                abortReason: "invalid-input",
                outcome: "aborted",
            };
        }
        if (concurrencyLimit < 0) {
            log.error(`❌ [notifyVCSBranchBuildDeployed] Invalid concurrency limit '${concurrencyLimit}'. Must be a positive integer.`);
            return {
                abortReason: "invalid-input",
                outcome: "aborted",
            };
        }
    }
    const resp = await callNotifyVCSBranchBuildDeployedMutation(deps, apiConfig, {
        baseEnvironmentAlias,
        concurrencyLimit: finalConcurrencyLimit,
        headEnvironmentAlias,
        headEnvironmentName,
        headEnvironmentVariables,
        headVcsBranch,
        headVcsCommitId,
        headVcsCommitUrl,
        pullOrMergeRequestNumber,
    });
    if (resp.isGqlError) {
        return graphQLErrorToAbortResult({
            graphQLPayload: resp,
            log,
            methodName: "notifyVCSBranchBuildDeployed",
        });
    }
    const result = resp.responseBody;
    if (result.outcome === "success") {
        const codeHostingInfo = result.codeHostingServiceInstallationPlatform === undefined
            ? ""
            : `, and code hosting service integration '${result.codeHostingServiceInstallationPlatform}'.`;
        log.info(`✅ [notifyVCSBranchBuildDeployed] Success. Run was deployed with ID: '${result.runId}'${codeHostingInfo}`);
        return {
            codeHostingServiceInstallationType: result.codeHostingServiceInstallationPlatform,
            outcome: "success",
            runId: result.runId,
        };
    }
    assertType(result.outcome);
    return domainFailureToAbortResult({
        log,
        methodName: "notifyVCSBranchBuildDeployed",
        result,
    });
}
export async function notifyVCSBranchBuildDeployed(deps, apiConfig, input) {
    const { maxRetries = 10 } = input;
    return retryWithExponentialBackoff({
        log: deps.log,
        maxRetries,
        methodName: "notifyVCSBranchBuildDeployed",
        retriableAbortReasons: [
            "network-error",
            "server-error",
            "run-creation-failed",
        ],
        runOnce: () => runNotifyVCSBranchBuildDeployedOnce(deps, apiConfig, input),
    });
}
//# sourceMappingURL=notify-vcs-branch-build-deployed.js.map