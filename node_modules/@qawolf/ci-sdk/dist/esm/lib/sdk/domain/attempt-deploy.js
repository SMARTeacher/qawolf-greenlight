import { postDeploySuccess } from "../../api/deploy";
import { assertType } from "../../utils";
export async function attemptNotifyDeploy(deps, apiConfig, config) {
    const { log } = deps;
    const responseState = await postDeploySuccess(apiConfig, config, deps);
    if (!responseState.success) {
        if (responseState.failureReason === "no-matched-trigger") {
            log.error(`ðŸš« No trigger matched the request. Please contact support.`);
            return { failReason: "no-matched-trigger", outcome: "failed" };
        }
        else if (responseState.failureReason === "run-could-not-be-created") {
            log.error(`ðŸš« Run could not be created. Reason: "${responseState.details}". Please contact support.`);
            return { failReason: "run-could-not-be-created", outcome: "failed" };
        }
        if (responseState.failureReason === "network-error")
            log.error(`ðŸš« Network error from deploy_success, aborting.`);
        else if (responseState.failureReason === "5XX-server-error")
            log.error(`ðŸš« Server error from deploy_success (status ${responseState.httpStatus}), aborting. Please contact support.`);
        else if (responseState.failureReason === "4XX-client-error") {
            log.error(`ðŸš« Unrecoverable error from deploy_success (status ${responseState.httpStatus}), aborting. Please contact support.`);
        }
        else if (responseState.failureReason === "403-forbidden") {
            log.error(`ðŸš« Forbidden error from deploy_success (status ${responseState.httpStatus}), aborting. Please contact support.`);
        }
        else if (responseState.failureReason === "401-unauthorized") {
            log.error(`ðŸš« Unauthorized error from deploy_success (status ${responseState.httpStatus}), aborting. Please contact support.`);
        }
        else {
            assertType(responseState);
        }
        if (responseState.failureReason === "network-error") {
            return {
                abortReason: "network-error",
                httpStatus: undefined,
                outcome: "aborted",
            };
        }
        return {
            abortReason: responseState.failureReason,
            httpStatus: responseState.httpStatus,
            outcome: "aborted",
        };
    }
    log.info(`âœ… Run created with ID: ${responseState.runId}`);
    return {
        outcome: "success",
        runId: responseState.runId,
    };
}
//# sourceMappingURL=attempt-deploy.js.map