import { assertType } from "../../../../utils";
export function graphQLErrorToAbortResult({ graphQLPayload, log, methodName, }) {
    switch (graphQLPayload.errorCode) {
        case "forbidden":
            log.error(`❌ [${methodName}] Forbidden. Aborting.`);
            return { abortReason: "forbidden", outcome: "aborted" };
        case "unauthenticated":
            log.error(`❌ [${methodName}] Unauthenticated. Aborting.`);
            return { abortReason: "unauthenticated", outcome: "aborted" };
        case "network-error":
            log.error(`❌ [${methodName}] Network error. Aborting.`);
            return { abortReason: "network-error", outcome: "aborted" };
        case "internal":
        case "unknown":
            return { abortReason: "server-error", outcome: "aborted" };
        case "bad-input":
            log.error(`❌ [${methodName}] Bad GraphQL input. This is a bug. Aborting.`);
            return { abortReason: "invalid-input", outcome: "aborted" };
        default:
            assertType(graphQLPayload.errorCode);
            throw new Error("Unreachable code detected. This is a bug.");
    }
}
//# sourceMappingURL=graphql-error.js.map