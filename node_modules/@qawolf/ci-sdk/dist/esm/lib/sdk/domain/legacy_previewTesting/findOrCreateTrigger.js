import { previewDeploymentType, qawolfGraphQLEndpoint } from "./constants";
export async function findOrCreateTrigger(deps, apiConfig, args) {
    const { branch, environmentId, pr, repositoryId, qaWolfTeamId, tags } = args;
    const triggerName = `Deployments of ${pr ? `PR #${pr.number} - ${pr.title}` : `branch ${branch}`}`;
    const retrievalResponse = await deps.fetch(qawolfGraphQLEndpoint, {
        body: JSON.stringify({
            query: `query getTriggersForBranch($where: TriggerWhereInput) {
        triggers(where: $where) {
          environment_id
          id
        }
      }
      `,
            variables: {
                where: {
                    environment_id: {
                        equals: environmentId,
                    },
                    name: {
                        equals: triggerName,
                    },
                },
            },
        }),
        headers: {
            Authorization: `Bearer ${apiConfig.apiKey}`,
            "Content-Type": "application/json",
        },
        method: "post",
    });
    const retrievalResponseJson = (await retrievalResponse.json());
    if (retrievalResponseJson.data.triggers[0]) {
        const triggerId = retrievalResponseJson.data.triggers[0].id;
        const environmentId = retrievalResponseJson.data.triggers[0].environment_id;
        deps.log.info(`Trigger with name ${triggerName} already exists with id ${triggerId} in environment ${environmentId}`);
        return triggerId;
    }
    const creationResponse = await deps.fetch(qawolfGraphQLEndpoint, {
        body: JSON.stringify({
            operationName: "createTrigger",
            query: `
        mutation createTrigger(
          $codeHostingServiceRepositoryId: ID!,
          $deploymentBranches: String!,
          $deploymentEnvironment: String!,
          $deploymentProvider: String!,
          $environmentId: ID!,
          $name: String!,
          $teamId: ID!,
          $tag_ids: [ID!]
        ) {
          createTrigger(
            codeHostingServiceRepositoryId: $codeHostingServiceRepositoryId,
            deployment_branches: $deploymentBranches,
            deployment_environment: $deploymentEnvironment,
            deployment_provider: $deploymentProvider,
            environment_id: $environmentId,
            name: $name,
            team_id: $teamId,
            tag_ids: $tag_ids
          ) {
            id
            __typename
          }
        }
      `,
            variables: {
                codeHostingServiceRepositoryId: repositoryId,
                deploymentBranches: branch,
                deploymentEnvironment: previewDeploymentType,
                deploymentProvider: "generic",
                environmentId,
                name: triggerName,
                tag_ids: tags?.map((tag) => tag.id),
                teamId: qaWolfTeamId,
            },
        }),
        headers: {
            Authorization: `Bearer ${apiConfig.apiKey}`,
            "Content-Type": "application/json",
        },
        method: "post",
    });
    const creationResponseJson = (await creationResponse.json());
    deps.log.info(`Trigger response: ${JSON.stringify(creationResponseJson)}`);
    const triggerId = creationResponseJson.data?.createTrigger?.id;
    if (!triggerId) {
        throw Error("Trigger ID not found in response");
    }
    deps.log.info(`Trigger created with ID: ${triggerId}`);
    return triggerId;
}
//# sourceMappingURL=findOrCreateTrigger.js.map