import { assertType } from "../../../../utils";
export function domainFailureToAbortResult({ log, result, methodName, }) {
    switch (result.failureCode) {
        case "run-creation-failed":
            log.error(`❌ [${methodName}] Run creation failed: ${result.failureDetails}. Aborting.`);
            return {
                abortReason: result.failureCode,
                outcome: "aborted",
            };
        case "base-environment-not-found":
            log.error(`❌ [${methodName}] Base environment not found. Aborting.`);
            return {
                abortReason: result.failureCode,
                outcome: "aborted",
            };
        case "head-trigger-not-found":
            log.error(`❌ [${methodName}] Head trigger not found. Aborting.`);
            return {
                abortReason: result.failureCode,
                outcome: "aborted",
            };
        case "invalid-input":
            log.error(`❌ [${methodName}] Invalid input: ${result.failureDetails} Aborting.`);
            return {
                abortReason: result.failureCode,
                outcome: "aborted",
            };
        case "non-ephemeral-head-environment-violation":
            log.error(`❌ [${methodName}] Non-ephemeral head environment violation. Aborting.`);
            return {
                abortReason: result.failureCode,
                outcome: "aborted",
            };
        case "base-trigger-not-found":
            log.error(`❌ [${methodName}] Base trigger not found. A QA Wolf representative should set this up for you. Aborting.`);
            return {
                abortReason: result.failureCode,
                outcome: "aborted",
            };
        case "head-environment-not-found":
            log.error(`❌ [${methodName}] Head environment not found. Aborting.`);
            return {
                abortReason: result.failureCode,
                outcome: "aborted",
            };
        default:
            assertType(result.failureCode);
            throw new Error(`[${methodName}] Unreachable code detected. This is a bug.`);
    }
}
//# sourceMappingURL=domain-failure.js.map