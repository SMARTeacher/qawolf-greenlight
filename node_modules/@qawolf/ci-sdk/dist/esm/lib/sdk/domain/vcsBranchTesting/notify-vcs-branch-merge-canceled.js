import { callNotifyVCSBranchMergeCanceledMutation } from "../../../api/notify-vcs-branch-merge-canceled-mutation";
import { assertType } from "../../../utils";
import { domainFailureToAbortResult } from "./lib/domain-failure";
import { graphQLErrorToAbortResult } from "./lib/graphql-error";
import { retryWithExponentialBackoff } from "./lib/retry";
async function runNotifyVCSMergeCanceledOnce(deps, apiConfig, input) {
    const log = deps.log;
    const { headEnvironmentAlias } = input;
    const resp = await callNotifyVCSBranchMergeCanceledMutation(deps, apiConfig, {
        headEnvironmentAlias,
    });
    if (resp.isGqlError) {
        return graphQLErrorToAbortResult({
            graphQLPayload: resp,
            log,
            methodName: "notifyVCSBranchMergeCanceled",
        });
    }
    const result = resp.responseBody;
    if (result.outcome === "success") {
        log.info(`âœ… [notifyVCSBranchMergeCanceled] Successfully notified the CI system that the merge was canceled.`);
        return {
            outcome: "success",
        };
    }
    assertType(result.outcome);
    return domainFailureToAbortResult({
        log,
        methodName: "notifyVCSBranchMergeCanceled",
        result,
    });
}
export async function notifyVCSBranchMergeCanceled(deps, apiConfig, input) {
    const { maxRetries = 10 } = input;
    return retryWithExponentialBackoff({
        log: deps.log,
        maxRetries,
        methodName: "notifyVCSBranchMergeCanceled",
        retriableAbortReasons: [
            "network-error",
            "server-error",
        ],
        runOnce: () => runNotifyVCSMergeCanceledOnce(deps, apiConfig, input),
    });
}
//# sourceMappingURL=notify-vcs-branch-merge-canceled.js.map