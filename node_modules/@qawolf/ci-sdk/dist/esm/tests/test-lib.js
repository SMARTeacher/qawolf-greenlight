import { jest } from "@jest/globals";
import { makeVCSBranchTestingSDK } from "../lib/sdk/domain/vcsBranchTesting";
import { makeQaWolfSdk } from "../lib/sdk/index";
const localDummyServiceBase = "http://localhost:80/";
const testLogger = {
    error: console.log.bind(console),
    info: console.log.bind(console),
    warn: console.log.bind(console),
};
export function makeVCSBranchTestingSDKForTest({ apiKey }) {
    // Can be used for mocking fetch
    const fetch = jest.fn(() => Promise.resolve(buildResponse({})));
    return {
        fetch,
        sdk: makeVCSBranchTestingSDK({
            apiKey,
            serviceBase: localDummyServiceBase,
        }, {
            fetch,
            log: testLogger,
        }),
    };
}
export function makeQaWolfSdkForTest({ apiKey }) {
    // Can be used for mocking fetch
    const fetch = jest.fn(() => Promise.resolve(buildResponse({})));
    return {
        fetch,
        sdk: makeQaWolfSdk({
            apiKey,
            serviceBase: localDummyServiceBase,
        }, {
            fetch,
            log: testLogger,
        }),
    };
}
export function buildResponse(response, status = 200) {
    return new Response(JSON.stringify(response), {
        headers: {
            "Content-type": "application/json",
        },
        status,
    });
}
export function buildCiGreenlightStatusBase() {
    return {
        relevantRunId: "foo",
        relevantRunUrl: "http://foo",
        relevantRunWithBugsUrl: "http://foo",
        rootRunId: "foo",
        rootRunUrl: "http://foo",
        workflowsDisabledAfterRunCount: 0,
        workflowsInRunCount: 10,
        workflowsUnderInvestigationCount: 0,
    };
}
//# sourceMappingURL=test-lib.js.map