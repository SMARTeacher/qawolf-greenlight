import { type ApiConfig } from "../../../api-types";
import { type SdkDependencies } from "../../dependencies";
import { type BaseVCSBranchConfig } from "./types";
export declare function notifyVCSBranchMergeCanceled(deps: SdkDependencies, apiConfig: ApiConfig, input: NotifyVCSBranchMergeCanceledInput): Promise<NotifyMergeCanceledResult>;
export type NotifyVCSBranchMergeCanceledInput = {
    /**
     * A unique alias for the environment being tested. We recommend using either
     * `pullRequestDetailsToEnvironmentAlias` or the more generic
     * `arbitraryStringToEnvironmentAlias` to generate this value.
     */
    headEnvironmentAlias: string;
} & BaseVCSBranchConfig;
export type NotifyMergeCanceledAbortReason = "forbidden" | "unauthenticated" | "network-error" | "server-error" | "invalid-input" | "head-environment-not-found" | "non-ephemeral-head-environment-violation" | "missing-vcs-branch-to-environment-alias-mapping";
export type NotifyMergeCanceledResult = {
    outcome: "success";
} | {
    abortReason: NotifyMergeCanceledAbortReason;
    outcome: "aborted";
};
//# sourceMappingURL=notify-vcs-branch-merge-canceled.d.ts.map