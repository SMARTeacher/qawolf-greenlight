import { type ApiConfig } from "../api-types";
import { type SdkDependencies } from "../sdk/dependencies";
export type GraphQLErrorPayload = {
    errorCode: "unauthenticated" | "forbidden" | "network-error" | "internal" | "bad-input" | "unknown";
    isGqlError: true;
};
export type GraphQLResponse<ResponseBody> = {
    isGqlError: false;
    responseBody: ResponseBody;
} | GraphQLErrorPayload;
export type RawGraphqlResponse<QueryName extends string, ResponseBody> = {
    data: {
        [key in QueryName]: ResponseBody;
    };
} | {
    errors: Array<{
        extensions?: Array<{
            code?: "UNAUTHENTICATED" | "FORBIDDEN" | "INTERNAL" | "BAD_USER_INPUT";
        }>;
        message: string;
    }>;
};
export declare function qawolfGraphql<Variables extends Record<never, unknown>, QueryName extends string>({ deps: { fetch: localFetch, log }, apiConfig: { apiKey, serviceBase }, name, query: queryGql, variables, }: {
    apiConfig: ApiConfig;
    deps: SdkDependencies;
    /**
     * `name` MUST match the name of the query/mutation in the passed `query`.
     */
    name: QueryName;
    query: string;
    variables: Variables;
}): Promise<GraphQLResponse<unknown>>;
//# sourceMappingURL=graphql.d.ts.map