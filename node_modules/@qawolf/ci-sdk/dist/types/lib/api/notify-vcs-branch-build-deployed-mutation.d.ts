import { type ApiConfig } from "../api-types";
import { type SdkDependencies } from "../sdk/dependencies";
import { type GraphQLResponse } from "./graphql";
export interface NotifyVCSBranchBuildDeployedMutationInput {
    baseEnvironmentAlias: string;
    concurrencyLimit: number | undefined;
    headEnvironmentAlias: string;
    headEnvironmentName: string;
    headEnvironmentVariables: Record<string, string>;
    headVcsBranch: string | undefined;
    headVcsCommitId: string;
    headVcsCommitUrl: string | undefined;
    pullOrMergeRequestNumber: number | undefined;
}
export type NotifyVCSBranchBuildDeployedResponseSchema = {
    codeHostingServiceInstallationPlatform: "GitHub" | "GitLab" | undefined;
    outcome: "success";
    runId: string;
} | {
    failureCode: "invalid-input" | "base-environment-not-found" | "base-trigger-not-found" | "head-trigger-not-found" | "non-ephemeral-head-environment-violation" | "run-creation-failed";
    failureDetails: string;
    outcome: "failed";
};
export declare function callNotifyVCSBranchBuildDeployedMutation(deps: SdkDependencies, apiConfig: ApiConfig, { baseEnvironmentAlias, concurrencyLimit, headEnvironmentAlias, headEnvironmentName, headEnvironmentVariables, headVcsCommitId, headVcsCommitUrl, headVcsBranch, pullOrMergeRequestNumber, }: NotifyVCSBranchBuildDeployedMutationInput): Promise<GraphQLResponse<NotifyVCSBranchBuildDeployedResponseSchema>>;
//# sourceMappingURL=notify-vcs-branch-build-deployed-mutation.d.ts.map